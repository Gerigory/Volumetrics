
//3d in, 3d out
float3 hash3d3(float3 pos)
{
	pos = float3(dot(pos, float3(127.1, 311.7,  74.7)), 
			  dot(pos, float3(269.5, 183.3, 246.1)), 
			  dot(pos, float3(113.5, 271.9, 124.6)));

	return  - 1.0 + 2.0 * frac(sin(pos) * 43758.5453123);
}

float grad3D(float hash, float3 pos) 
{
    return dot(hash, pos);
    // float angle = 6.283185 * hash + 4.0 * pos.z * hash;
    // return dot(float2(cos(angle), sin(angle)), pos.xy);

    // int h = int(1e4*hash) & 15;
	// float u = h<8 ? pos.x : pos.y,
 	// 	  v = h<4 ? pos.y : h==12||h==14 ? pos.x : pos.z;
    // return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
}

// Fractional value for sample position in the cloud layer .
float GetHeightFractionForPoint(float3 inPosition, float2 inCloudMinMax)
{
    // Get global fractional position in cloud zone .
    float height_fraction = (inPosition.z - inCloudMinMax.x) / (inCloudMinMax.y - inCloudMinMax.x);
    return saturate(height_fraction);
}

// Utility function that maps a value from one range to another .
float Remap(float original_value , float original_min, float original_max , float new_min , float new_max)
{
    return new_min + ((original_value - original_min) / (original_max - original_min)) * (new_max - new_min);
}

float perlin(float3 uvw, int Frequncy, float Coverage)
{
    uvw *= Frequncy;
    int3 pi = floor(uvw); 
    float3 pf = uvw - pi;

    int3 posNoOffsetArr[8] = 
    {
        int3(0, 0, 0),
        int3(1, 0, 0),
        int3(0, 1, 0),
        int3(1, 1, 0),
        int3(0, 0, 1),
        int3(1, 0, 1),
        int3(0, 1, 1),
        int3(1, 1, 1),
    };
    
    return  lerp( 
                lerp( 
                    lerp(
                        grad3D(hash3d3((pi + posNoOffsetArr[0])%Frequncy), pf - posNoOffsetArr[0]),
                        grad3D(hash3d3((pi + posNoOffsetArr[1])%Frequncy), pf - posNoOffsetArr[1]), 
                        pf.x ),
                    lerp(
                        grad3D(hash3d3((pi + posNoOffsetArr[2])%Frequncy), pf - posNoOffsetArr[2]), 
                        grad3D(hash3d3((pi + posNoOffsetArr[3])%Frequncy), pf - posNoOffsetArr[3]), 
                        pf.x ), 
                    pf.y ),
        		 lerp( 
                    lerp( 
                        grad3D(hash3d3((pi + posNoOffsetArr[4])%Frequncy), pf - posNoOffsetArr[4]), 
                        grad3D(hash3d3((pi + posNoOffsetArr[5])%Frequncy), pf - posNoOffsetArr[5]), 
                        pf.x ),
            		lerp( 
                        grad3D(hash3d3((pi + posNoOffsetArr[6])%Frequncy), pf - posNoOffsetArr[6]), 
                        grad3D(hash3d3((pi + posNoOffsetArr[7])%Frequncy), pf - posNoOffsetArr[7]), 
                        pf.x ), 
                    pf.y ), 
                pf.z ) + Coverage;
}

float perlinFBM(float3 uvw, int firstOctave, int accumOctaves, int iTime, float TimeScale, float Coverage)
{
    float sum = 0.0;
    float frequency = pow(2, firstOctave);
	const float persistence = 0.6;
    float amplitude = pow(persistence, firstOctave);
    for(int i=firstOctave; i < firstOctave + accumOctaves;i++)
    {
		uvw += iTime * TimeScale;
        sum += perlin(uvw, frequency, Coverage) * amplitude;
        frequency *= 2.0;
        amplitude *= persistence;
    }
	return sum;
}

float CloudTypeConvert(float OriginalNoise, float StratusThreshold, float CumulousThreshold)
{
    return OriginalNoise;
    if(OriginalNoise > StratusThreshold)
    {
        return 0.0f;
    }
    else if(OriginalNoise < CumulousThreshold)
    {
        return 1.0f;
    }
    else
    {
        return 0.5f;
    }
}

float smooth_step(float r)
{
    if(r<0) 
        return 0;
    else if(r>1) 
        return 1;
    else
        return r*r*r*(10+r*(-15+r*6));
}

float ramp(float r)
{ 
    return smooth_step((r+1)/2)*2-1; 
}

float potential(float3 uvw, int firstOctave, int accumOctaves, int iTime, float TimeScale, float SliceNum, float Coverage)
{
    float noise = perlinFBM(uvw, firstOctave, accumOctaves, iTime, TimeScale, Coverage);
    return abs(1 - 2 * noise);
}

// Performs worley noise by checking all adjacent cells
// and comparing the distance to their points
float worley(float3 coord, int CellNum)
{
    float3 cell = coord * CellNum;
    float3 intPos = floor(cell);
    float3 fracPos = frac(cell);
    float dist = 125.0;
    
    // Search in the surrounding 5x5x5 cell block
    const int Range = 2;
    for (int x = -Range; x <= Range; x++) 
	{ 
        for (int y = -Range; y <= Range; y++) 
		{
			for(int z = -Range; z <= Range; z++)
			{
                float3 CellIndex = intPos + float3(x, y, z);
                //To Make Noise Successive In All Dirctions
                CellIndex = frac((CellIndex + float(CellNum)) / CellNum)*CellNum;
				float D = distance(hash3d3(CellIndex) + float3(x, y, z), fracPos);
                // take the feature point with the minimal distance
                dist = min(dist, D);
			}
        }
    }
    return dist;

