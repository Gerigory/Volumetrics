// Arbitrary random, can be replaced with a function of your choice
float rand(float2 co)
{
    return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
}

float grad3D(float hash, float3 pos) 
{
    int h = int(1e4*hash) & 15;
	float u = h<8 ? pos.x : pos.y,
 		  v = h<4 ? pos.y : h==12||h==14 ? pos.x : pos.z;
    return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
}

float hash13(float3 pos, float Coverage, int NoiseTexRes, Texture2D WhiteNoise, SamplerState WhiteNoiseSampler)
{
    float2 uv = pos.xy + pos.z;
	return Texture2DSample(WhiteNoise, WhiteNoiseSampler, uv / NoiseTexRes).r;
    // return Texture2DSample(WhiteNoise, WhiteNoiseSampler, (uv + 0.5)/NoiseTexRes).x;
}

float fade(float t) 
{
    // return t*(6.0*t-15.0)+10.0;
    return t;
    // return t*t*t*(t*(6.0*t-15.0)+10.0); 
}

float COSInterpolation(float x,float y,float n)
{
    // return lerp(x, y, n);
    float r = n*3.1415926;
    float f = (1.0-cos(r))*0.5;
    return x*(1.0-f)+y*f;
    
}

float perlin(float3 uvw, float Coverage, int NoiseTexRes, Texture2D WhiteNoise, SamplerState WhiteNoiseSampler)
{
    float3 pi = floor(uvw); 
    float3 pf = uvw - pi;
    
    float u = fade(pf.x);
    float v = fade(pf.y);
    float w = fade(pf.z);
    
    return  COSInterpolation( 
                COSInterpolation( 
                    COSInterpolation( 
                        grad3D(hash13(pi + float3(0, 0, 0), Coverage, NoiseTexRes, WhiteNoise, WhiteNoiseSampler), pf - float3(0, 0, 0)),
                        grad3D(hash13(pi + float3(1, 0, 0), Coverage, NoiseTexRes, WhiteNoise, WhiteNoiseSampler), pf - float3(1, 0, 0)), 
                        u ),
                    COSInterpolation( 
                        grad3D(hash13(pi + float3(0, 1, 0), Coverage, NoiseTexRes, WhiteNoise, WhiteNoiseSampler), pf - float3(0, 1, 0)), 
                        grad3D(hash13(pi + float3(1, 1, 0), Coverage, NoiseTexRes, WhiteNoise, WhiteNoiseSampler), pf - float3(1, 1, 0)), 
                        u ), 
                    v ),
        		 COSInterpolation( 
                    COSInterpolation( 
                        grad3D(hash13(pi + float3(0, 0, 1), Coverage, NoiseTexRes, WhiteNoise, WhiteNoiseSampler), pf - float3(0, 0, 1)), 
                        grad3D(hash13(pi + float3(1, 0, 1), Coverage, NoiseTexRes, WhiteNoise, WhiteNoiseSampler), pf - float3(1, 0, 1)), 
                        u ),
            		COSInterpolation( 
                        grad3D(hash13(pi + float3(0, 1, 1), Coverage, NoiseTexRes, WhiteNoise, WhiteNoiseSampler), pf - float3(0, 1, 1)), 
                        grad3D(hash13(pi + float3(1, 1, 1), Coverage, NoiseTexRes, WhiteNoise, WhiteNoiseSampler), pf - float3(1, 1, 1)), 
                        u ), 
                    v ), 
                w ) + sin(Coverage);
}

// Returns the point in a given cell
float3 get_cell_point(float3 cell, int CellNum) 
{
	float3 cell_base = cell / CellNum;
	float noise_x = rand(cell.xy);
    float noise_y = rand(cell.yz);
    float noise_z = rand(cell.zx);
    return cell_base + (0.5 + 1.5 * float3(noise_x, noise_y, noise_z)) / CellNum;
}

// Performs worley noise by checking all adjacent cells
// and comparing the distance to their points
float worley(float3 coord, int CellNum)
{
    float3 cell = floor(coord * CellNum);
    float dist = 10000.0;
    
    // Search in the surrounding 5x5x5 cell block
    for (int x = 0; x < 5; x++) 
	{ 
        for (int y = 0; y < 5; y++) 
		{
			for(int z = 0; z < 5; z++)
			{
				float3 cell_point = get_cell_point(cell + float3(x-2, y-2, z-2), CellNum);
				dist = min(dist, length(cell_point - coord));
			}
        }
    }
	
	float3 invCellsNum = float3(1.0 / CellNum, 1.0 / CellNum, 1.0 / CellNum);
	dist /= length(invCellsNum);
    dist = 1.0 - dist;
    return dist;

