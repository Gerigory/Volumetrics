#pragma once

#define Debug true

const float TanHalfFOV = 1;
const float3 SphereOrigin = float3(0, 0, PlanetRadius);
float3 CamPosInMeters = ResolvedView.WorldCameraOrigin / 100.0f;//from centimeter to meters
const float3 RayOrigin = CamPosInMeters + SphereOrigin;
const float3 RayDirection = -Parameters.CameraVector;//Screen Space Pixel's Camera Ray Direction
const float3 LightVector = MaterialExpressionSkyAtmosphereLightDirection(Parameters, 0);

// Get Ray's Slope Depth Rather Than Projected Depth
float SceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(Parameters))) / abs(dot(RayDirection, ResolvedView.ViewForward));
float2 ViewSize = View.ViewSizeAndInvSize.xy;
float3 PlanetOuter = SphereIntersection(RayOrigin, RayDirection, PlanetRadius, SceneDepth);
float2 CloudIntersections = GetCloudIntersection(PlanetRadius, CloudMinMax.xy * 1000.0f, RayOrigin, RayDirection, SceneDepth).rg;
float RayDistance = CloudIntersections.x;
float MipLevel = GetMipLevel(RayDistance, TanHalfFOV, 1, VolumeResolution, ViewSize);

if(Debug)
{
	MipLevel = 0;
	// CloudIntersections = float2(3, 17) * StepSize;
}
if((CloudIntersections.y - CloudIntersections.x) < 1e-3)
	return float4(1, 1, 1, 0);
else
	MaxSteps = min((CloudIntersections.y - CloudIntersections.x) / StepSize + 1, MaxSteps);

float3 pos = RayOrigin + CloudIntersections.x * RayDirection;//unit in meter
float3 PWNoiseUVW = GetSampleUVW(pos - SphereOrigin, float4(CloudMinMax.xyz, 1.0f));
float3 WeatherData = WeatherTex.SampleLevel(WeatherTexSampler, PWNoiseUVW.xy, 0).rgb;


CloudScene Cloud;
Cloud.pos = pos; 
Cloud.DensityScale = DensityScale; 
Cloud.LightStepSize = LightStepSize;
Cloud.DirectionalLightDirection = ResolvedView.DirectionalLightDirection;
Cloud.CloudMinMax = float4(CloudMinMax.xyz, 1.0f); 
Cloud.iTime = iTime; 
Cloud.WeatherData = WeatherData; 
Cloud.MipLevel = MipLevel;
Cloud.MaxSteps = MaxSteps;
Cloud.StepSize = StepSize;
Cloud.PWNoiseTex = PWNoiseTex;  
Cloud.PWNoiseTexSampler = PWNoiseTexSampler;
Cloud.CurlNoiseTex = CurlNoiseTex;  
Cloud.CurlNoiseTexSampler = CurlNoiseTexSampler;
Cloud.HeightLUTTex = HeightLUTTex;  
Cloud.HeightLUTTexSampler = HeightLUTTexSampler;
Cloud.RayDirection = RayDirection;
Cloud.SphereOrigin = SphereOrigin;

return CloudRendering(Cloud);


// #include "/Shaders/VolumetricClouds/VolumetricCloudCall.ush"
// return 1;