#pragma once

float Debug = 1.0f;

const float TanHalfFOV = 1;
const float3 SphereOrigin = float3(0, 0, PlanetRadius);
float3 CamPosInMeters = ResolvedView.WorldCameraOrigin / 100.0f;//from centimeter to meters
const float3 RayOrigin = CamPosInMeters + SphereOrigin;
const float3 RayDirection = -Parameters.CameraVector;//Screen Space Pixel's Camera Ray Direction
const float3 LightVector = MaterialExpressionSkyAtmosphereLightDirection(Parameters, 0);

// Get Ray's Slope Depth Rather Than Projected Depth
float SceneDepth = CalcSceneDepth(ScreenAlignedPosition(GetScreenPosition(Parameters))) / abs(dot(RayDirection, ResolvedView.ViewForward));
float2 ViewSize = View.ViewSizeAndInvSize.xy;
// float3 PlanetOuter = SphereIntersection(RayOrigin, RayDirection, PlanetRadius, SceneDepth);
float2 CloudIntersections = GetCloudIntersection(PlanetRadius, CloudMinMax.xy * 1000.0f, RayOrigin, RayDirection, SceneDepth).rg;
float RayStartDistance = CloudIntersections.x;

float RayLength = CloudIntersections.y - RayStartDistance;
if((RayLength) < 1e-3)
	return float4(1, 1, 1, 0);
else
	MaxSteps = min(RayLength / StepSize + 1, MaxSteps);

float3 pos = RayOrigin + RayStartDistance * RayDirection;//unit in meter

CloudScene Cloud;
Cloud.pos = pos; 
Cloud.WeatherParams = WeatherParams; 
Cloud.LightStepSize = LightStepSize;
Cloud.DirectionalLightDirection = ResolvedView.DirectionalLightDirection;
Cloud.CloudMinMax = CloudMinMax; 
Cloud.CloudScaleParams = CloudScaleParams;
Cloud.iTime = iTime; 
Cloud.VolumeResolution = VolumeResolution;
Cloud.ViewSize = ViewSize;
Cloud.MaxSteps = MaxSteps;
Cloud.StepSize = StepSize;
Cloud.PWNoiseTex = PWNoiseTex;  
Cloud.PWNoiseTexSampler = PWNoiseTexSampler;
Cloud.WeatherTex = WeatherTex;  
Cloud.WeatherTexSampler = WeatherTexSampler;
Cloud.CurlNoiseTex = CurlNoiseTex;  
Cloud.CurlNoiseTexSampler = CurlNoiseTexSampler;
Cloud.HeightLUTTex = HeightLUTTex;  
Cloud.HeightLUTTexSampler = HeightLUTTexSampler;
Cloud.RayDirection = RayDirection;
float3 xDir = float3(1, 0, 0);
Cloud.BiTangent = normalize(cross(RayDirection, xDir));
Cloud.Tangent = normalize(cross(Cloud.BiTangent, RayDirection));
Cloud.SphereOrigin = SphereOrigin;
Cloud.RayOrigin = RayOrigin;
Cloud.Debug = Debug;

return CloudRendering(Cloud);


// #include "/Shaders/VolumetricClouds/ZeroVolumetricCloudRender.ush"
// return 1;