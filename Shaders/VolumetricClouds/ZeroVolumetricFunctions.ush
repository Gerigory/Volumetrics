#pragma once

#define NumShadowSteps 16
#define Episilon 1e-6

struct CloudScene
{
	float3 pos;
	float DensityScale;
	float LightStepSize;
	float3 DirectionalLightDirection;
	float4 CloudMinMax;
	int iTime;
	float3 WeatherData;
	float MipLevel;
	float MaxSteps;
	float StepSize;
	Texture3D PWNoiseTex; 
	SamplerState PWNoiseTexSampler;
	Texture2D CurlNoiseTex; 
	SamplerState CurlNoiseTexSampler;
	Texture2D HeightLUTTex;  
	SamplerState HeightLUTTexSampler;
	float3 RayDirection;
	float3 Tangent;//X Direction Tangent
	float3 BiTangent;//Y Direction Tangent
	float3 SphereOrigin;
	float3 RayOrigin;	
};

// find the intersection distance from camera of 
// ray direction with sphere with radius = inRadius
// @ float3 RayOrigin: Ray Origin -> Camera Pos From Planet Center
// @ float3 RayDirection: revert of Camera Look At Dir
// @ float inRadius, Radius of Planet
// @ float SceneDepth, Current Pixel's Depth
float3 SphereIntersection(float3 RayOrigin, float3 RayDirection, float inRadius, float SceneDepth)
{
	float B = dot(RayDirection, RayOrigin);//cos(theta), theta -> angle between raydirection & planetcenter-camera ray
	float C = dot(RayOrigin, RayOrigin) - inRadius * inRadius;

	// binomial root 
	// B^2 - C = R^2 - (RO^2 - B^2)
	// RO^2 - B^2 -> min distance from planet center to camera ray
	float t0 = -B - sqrt(B * B - C);
	float t1 = -B + sqrt(B * B - C);
	
	//intersection with backward position, make it zero
	t0 = max(t0, 0);
	//intersection with a object, make it stop at the position
	t1 =(t1 > 0) ? min(t1, SceneDepth) : t1;

	return float3(t0, t1, max(0, t1 - t0));
}

float2 GetCloudIntersection(float EarthRadius, float2 inCloudMinMax, float3 RayOrigin, float3 RayDirection, float SceneDepth)
{
	float CloudLayerAltitude = inCloudMinMax.x;
	float CloudLayerThickness = inCloudMinMax.y - inCloudMinMax.x;

	float LayerABottom = EarthRadius + CloudLayerAltitude;
	float LayerATop = LayerABottom + CloudLayerThickness;
	
	float3 PlanetOuter = SphereIntersection(RayOrigin, RayDirection, EarthRadius, SceneDepth);
	
	//Hit Planet First, Use Distance As New SceneDepth
	if( PlanetOuter.x > Episilon && SceneDepth > PlanetOuter.x )
	{
		SceneDepth = PlanetOuter.x;
	}
	
	float3 LayerAOuter = SphereIntersection(RayOrigin, RayDirection, LayerATop, SceneDepth);
	float3 LayerAInner = SphereIntersection(RayOrigin, RayDirection, LayerABottom, SceneDepth);
	
	float cloudentry = LayerAOuter.x;
	float cloudexit = LayerAOuter.y;
	float2 CloudRange = 0.0f;

	//Camera Located Out of Cloud Layer
	if(LayerAOuter.x > Episilon)
	{
		CloudRange = LayerAOuter.xy;
	}
	//Camera Located In Cloud Layer
	else if(LayerAInner.x > Episilon)
	{
		CloudRange.x = 0.0f;
		CloudRange.y = LayerAOuter.y;
	}
	//Camera Located Under Cloud Layer
	else
	{
		CloudRange.x = LayerAInner.y;
		CloudRange.y = LayerAOuter.y;
	}
	return CloudRange;
}

// Utility function that maps a value from one range to another .
float RangeRemap(float OrginalVal, float OrginalMin, float OrginalMax, float NewMin, float NewMax)
{
	float OrginalRange = max(OrginalMax - OrginalMin, Episilon);
	float NewRange = NewMax - NewMin;
	float ValueOffset = OrginalVal - OrginalMin;
	float OriginalScale = saturate(ValueOffset / OrginalRange);
	float RemappedVal = NewMin +  OriginalScale * NewRange;
	return RemappedVal;
}

// Fractional value for sample position in the cloud layer .
float GetHeightFractionForPoint(float3 inPosition, float PlanetRadius, float4 inCloudMinMax)
{
	inPosition.z = length(inPosition) - PlanetRadius;//Position Altitude
	// Get global fractional position in cloud zone .
	float HeightFraction = (inPosition.z / 1000.0f - inCloudMinMax.x) /(inCloudMinMax.y - inCloudMinMax.x);
	return saturate(HeightFraction);
}

// Get The Mip Level of Cloud Shape Texture(PWNoiseTex)
// @ float RayDistance, Distance of Intersection Point From Camera of Current Ray 
// @ float TanHalfFOV, 
// @ float RepeatSize, 
// @ float VolumeResolution, Cloud Shape Texture Resolution
// @ float2 ViewSize, Screen Size
float GetMipLevel(float RayDistance, float TanHalfFOV, float RepeatSize, float VolumeResolution, float2 ViewSize)
{
	float TexelsPerPixel =((RayDistance * TanHalfFOV * 2) / RepeatSize) *(VolumeResolution / max(ViewSize.x, ViewSize.y));
	return max(0, log2(TexelsPerPixel));
}

float GetDensityHeightGradientForPoint(float HeightFraction, float3 WeatherData, Texture2D HeightLUTTex,  SamplerState HeightLUTTexSampler)
{
	float3 HeightLUT = HeightLUTTex.SampleLevel(HeightLUTTexSampler, float2(0, HeightFraction), 0).rgb;
	int CloudType = round(saturate(WeatherData.b) * 2 );// 0 for stratus, 1 for stratucumulous, 2 for cumulous
	if(0 == CloudType)
		return HeightLUT.x;
	else if(0 == CloudType)
		return HeightLUT.y;
	else
		return HeightLUT.z;
}

// Get The Texture Sample UV
// @ float3 pos, Position in Planetary Space, Planet Center is The Origin
// @ float PlanetRadius, 
// @ float4 inCloudMinMax
float3 GetSampleUVW(float3 pos, float PlanetRadius, float4 inCloudMinMax)
{
	pos.z = length(pos) - PlanetRadius;//Position Altitude
	float3 PosInKm = pos / 1000.0f;
	float3 PWNoiseUVW = (PosInKm + float3(inCloudMinMax.z, inCloudMinMax.z, -inCloudMinMax.x)) / float3(inCloudMinMax.z * 2, inCloudMinMax.z * 2, inCloudMinMax.y - inCloudMinMax.x);
	return frac(PWNoiseUVW);
}


float SampleCloudDensity(float3 pos, CloudScene Cloud, bool SampleUsingCheapWay)
{
	// Get the height fraction for use with blending noise types over height .
	float HeightFraction = GetHeightFractionForPoint(pos, Cloud.SphereOrigin.z, Cloud.CloudMinMax);
	// Wind Simulation -----------------------------------------
	{
		// Wind settings .
		float3 wind_direction = float3(1.0 , 0.0 , 0.0);
		float cloud_speed = 10.0;

		// cloud top offset pushes the tops of the clouds along
		// this wind direction by this many units .
		float cloud_top_offset = 500.0;

		// Skew in wind direction .
		float3 CloudMoveVector = HeightFraction * wind_direction * cloud_top_offset ;

		// Animate clouds in wind direction and add a small upward bias to the wind direction .
		CloudMoveVector +=(wind_direction + float3(0.0 , 0.1 , 0.0)) * Cloud.iTime * cloud_speed;

		pos += Cloud.Tangent * CloudMoveVector.x + Cloud.BiTangent * CloudMoveVector.y + Cloud.RayDirection * CloudMoveVector.z;
	}


	// Base Cloud Modeling -----------------------------------------

	// Read the low-frequency Perlin-Worley and Worley noises .
	float3 PWNoiseUVW = GetSampleUVW(pos, Cloud.SphereOrigin.z, Cloud.CloudMinMax);
	// r -> perlin noise, g -> low frequency pw noise, b -> high frequency pw noise
	float2 PWNoise = Cloud.PWNoiseTex.SampleLevel(Cloud.PWNoiseTexSampler, PWNoiseUVW, Cloud.MipLevel).rg;

	// Build an FBM out of the low frequency Worley noises  that can be used to add detail to the 
	// low-frequency Perlin-Worley noise .
	float low_freq_FBM = PWNoise.g;

	// define the base cloud shape by dilating it with the
	// low-frequency FBM made of Worley noise.
	float BaseCloud = RangeRemap(PWNoise.r, -(1.0 - low_freq_FBM) , 1.0 , 0.0 , 1.0);

	// Get the density-height gradient using the density height
	// function explained in Section 2.2 .
	float DensityHeightGradient = GetDensityHeightGradientForPoint(HeightFraction, Cloud.WeatherData, Cloud.HeightLUTTex,  Cloud.HeightLUTTexSampler);

	// Apply the height function to the base cloud shape .
	BaseCloud *= DensityHeightGradient;

	// Base Cloud Coverage Tunning -----------------------------------------
	// Cloud coverage is stored in weather data’s red channel .
	float cloud_coverage = Cloud.WeatherData.r;
	// return cloud_coverage;

	// Use remap to apply the cloud coverage attribute
	float BaseCloudWithCoverage = RangeRemap(BaseCloud, cloud_coverage, 1.0, 0.0, 1.0);
	// Multiply the result by the cloud coverage attribute so
	// that smaller clouds are lighter and more aesthetically pleasing .
	BaseCloudWithCoverage *= cloud_coverage;

	// Cloud Detail Add -----------------------------------------
	if(!SampleUsingCheapWay)
	{	
		// curl noise sampling
		float2 CurlNoise = Cloud.CurlNoiseTex.SampleLevel(Cloud.CurlNoiseTexSampler, PWNoiseUVW.xy, 0).rg;

		// Add some turbulence to bottoms of clouds .
		pos.xy += CurlNoise * (1.0 - HeightFraction);

		PWNoiseUVW = GetSampleUVW(pos, Cloud.SphereOrigin.z, Cloud.CloudMinMax);
		// Sample high-frequency noises .
		float HighFreqFBM = Cloud.PWNoiseTex.SampleLevel(Cloud.PWNoiseTexSampler, PWNoiseUVW * 0.1 , Cloud.MipLevel).b;

		// Transition from wispy shapes to billowy shapes over height .
		float high_freq_noise_modifier = lerp(HighFreqFBM, 1.0 - HighFreqFBM , saturate(HeightFraction * 10.0));

		// Erode the base cloud shape with the distorted high-frequency Worley noises .
		float final_cloud = RangeRemap(BaseCloudWithCoverage, high_freq_noise_modifier * 0.2 , 1.0 , 0.0 , 1.0);

		return final_cloud * Cloud.DensityScale;
	}
	else
	{
		return BaseCloudWithCoverage * Cloud.DensityScale;
	}
	
}

float HenyeyGreenstein(float3 inLightVector, float3 inViewVector , float inG)
{
	float CosAngle = dot(normalize(inLightVector), normalize(inViewVector));
	return((1.0 - inG * inG) / pow((1.0 + inG * inG - 2.0 * inG * CosAngle) , 3.0 / 2.0)) / 4.0 * 3.1415;
}

float GetLightTransmittance(float LightSamples)
{
	LightSamples = max(0.0f, LightSamples);
	float PowderSugerEffect = 1.0 - exp(-LightSamples * 2.0);

	float BeersLaw = exp (-LightSamples);

	float LightEnergy = 2.0 * BeersLaw * PowderSugerEffect;

	return LightEnergy;
}

static const float3 noise_kernel[6] =
{
	float3(0.25387, -1.24151, -0.65258),
	float3(-1.63962, -0.77099, 0.20001),
	float3(-0.45732, -0.11479,  0.87494),
	float3(0.22146,  0.49370, -0.29963),
	float3(-0.91753, -1.92875,  0.49722),
	float3(-0.65509,  0.60337,  0.95802),
};

// A function to gather density in a cone for use with lighting clouds .
float SampleCloudDensityAlongCone(float3 pos, CloudScene Cloud)
{
	float DensityAlongCone = 0.0;

	// How wide to make the cone .
	float ConeSpreadMultiplier = Cloud.LightStepSize;

	// Lighting ray−march loop .
	for(int i  = 0; i < 7; i++)
	{
		// Add the current step offset to the sample position .
		float3 noiseKer = float3(0, 0, 0);
		if(6 == i)
		{
			noiseKer = Cloud.DirectionalLightDirection;
		}
		else
		{
			noiseKer = noise_kernel[i];
		}
		
		pos += Cloud.LightStepSize * Cloud.DirectionalLightDirection + (Cloud.LightStepSize * noiseKer * float (i));

		if (DensityAlongCone < 0.3)
		{
			// Sample cloud density the expensive way .
			DensityAlongCone += SampleCloudDensity(pos, Cloud, false);
		}
		else
		{
			// Sample cloud density the cheap way , using only one level of noise .
			DensityAlongCone += SampleCloudDensity(pos, Cloud, true);
		}
	}

	return DensityAlongCone;
}

float4 CloudRendering(CloudScene Cloud)
{
	float Transmittance = 1.0;
	float CloudTest = 0.0;
	int ZeroDensitySampleCount = 0;
	int HitSamples = 0;
	// Start the main ray−march loop .
	for (int i = 0; i < Cloud.MaxSteps; i++)
	{
		if (Transmittance < 0.001)
		{
			//transmittance = 0;
			//return float4(lightenergy, accum);
			return float4(1, 1, 1, 1 - Transmittance);
		}
		// cloud test starts as zero so we always evaluate the
		// second case from the beginning .
		if (CloudTest > 0.0)
		{
			// Sample density the expensive way, indicating a full sample .
			float SampleDensity = SampleCloudDensity(Cloud.pos, Cloud, false);
			HitSamples++;
			// If we just samples a zero , increment the counter .
			if(Episilon > abs(SampleDensity))
			{
				ZeroDensitySampleCount ++;
				// If we are doing an expensive sample that is still potentially in the cloud :
				// if (ZeroDensitySampleCount != 6)
				// {
				// 	// SampleCloudDensityAlongCone just walks in the given direction from the start point and takes X number of lighting samples .
				// 	float DensityAlongLightRay = SampleCloudDensityAlongCone(Cloud.pos, Cloud);
				// } 
			}
			else
			{
				float fCurDensity = GetLightTransmittance(SampleDensity * Cloud.StepSize / 1000.0f);
				Transmittance *= fCurDensity;
			}

		 	// If not potentially in the cloud , then set cloud test to zero so that we go back to the cheap sample case .
			if (6 == ZeroDensitySampleCount)
			{
				CloudTest = 0.0;
				ZeroDensitySampleCount = 0;
			}
			Cloud.pos += Cloud.StepSize * Cloud.RayDirection;
		}
		else
		{
			// Sample density the cheap way , only using the low−frequency noise .
			CloudTest = SampleCloudDensity(Cloud.pos, Cloud, true) ;
			if (Episilon > abs(CloudTest))
			{
				Cloud.pos += Cloud.StepSize * Cloud.RayDirection ;
			}
			else// Hitted, Need to do Another Expensive Sampling At The Same Position
			{
				i--;
			}
			
		}
	}
	return float4(1, 1, 1, 1 - Transmittance);

// return 1;
// }
// #include "/Shaders/VolumetricClouds/VolumetricCloudFunctions.ush"